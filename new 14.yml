 AWSTemplateFormatVersion: '2010-09-09'
Description:  Cloud Formation Demo Stack
Metadata: {
    "Version": "v1.0",
    "Comments": "Generated by kp",
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
        "Label": { "default": "Network Configuration" },
        "Parameters": ["CidrBlock", "pubAvailabilityZone", "pubSubnetCIDR", "privAvailabilityZone", "privSubnetCIDR"]
      },
      {
        "Label": { "default": "EC2 Instances Configuration" },
        "Parameters": ["InstanceName", "InstanceType", "Environment"]
      },
      {
        "Label": { "default": "RDS Instance Configuration" },
        "Parameters": ["DBInstanceId", "DBName", "DBEngine", "DBUserName", "DBUserPass", "DBStorage", "DBInstanceClass"]
      }
      ]
    }
  }

Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/24
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String
  pubAvailabilityZone:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  pubSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.0/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  privAvailabilityZone:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
  privSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.10.12.128/25
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String

  InstanceName:
    Type: String

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: region-virginia-assingment-demo-key1
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  

  InstancePublicIP:
    Description: Specifies whether to launch instances with public IP addresses in your VPC.
    Type: String
    Default : "True"
    AllowedValues : ["False", "True"]

  InstanceAMI:
    Description: "AMI for use with the EC2 instances"
    Type: String
    Default: "ami-011b3ccf1bd6db744"
    AllowedValues: ["ami-011b3ccf1bd6db744"]

  DBInstanceId:
    Description: "The RDS DB Instance Identifier"
    Type: String
    Default: "rds-mongodb-inst01"
    ConstraintDescription: Must be a valid RDS instance ID

  DBName:
    Description: "The RDS DB Instance Name"
    Type: String
    Default: "wpdb01"
    ConstraintDescription: No Special Characters

  DBEngine:
    Description: "The RDS DB Engine Type"
    Type: String
    Default: "mongodb"
    ConstraintDescription: Must be a valid RDS Engine Type

  DBUserName:
    Description: "The RDS DB Instance UserName"
    Type: String
    Default: "dbuser"
    ConstraintDescription: No Special Characters

  DBUserPass:
    Description: "The RDS DB Instance Password"
    Type: String
    Default: "dbuserpass"
    ConstraintDescription: Choose wisely

  DBStorage:
    Description: "The RDS DB Size in GB"
    Type: String
    Default: "5"
    ConstraintDescription: Storage in GBs

  DBInstanceClass:
    Description: "The RDS DB Instance Type"
    Type: String
    Default: "db.t2.micro"
    ConstraintDescription: Must be a valid RDS instance Class
MongoVolume1: 
    Description: First EBSencrypted volume.
Type: "AWS::EC2::Volume"
Properties: 
 Size: "5"
 Encrypted: true
 Fn::GetAZs: us-east-1
  
     
  
  
 MongoVolumeMount1: 
   Type: "AWS::EC2::VolumeAttachment"
Properties: 
 InstanceId: 
  Ref: DBInstanceId
 VolumeId: 
  Ref: MongoVolume1
 Device: "/dev/sdh1"
 
 MongoVolume2:  
 Description: second EBSencrypted volume.
Type: "AWS::EC2::Volume"
Properties: 
 Size: "5"
 Encrypted: true
 Fn::GetAZs: us-east-1
  
  
  

MongoVolumeMount2: 
   Type: "AWS::EC2::VolumeAttachment"
Properties: 
 InstanceId: 
  Ref: DBInstanceId
 VolumeId: 
  Ref: MongoVolume1
 Device: "/dev/sdh2"
 
 MongoVolume3: 
 Description: third EBSencrypted volume.
Type: "AWS::EC2::Volume"
Properties: 
 Size: "5"
 Encrypted: true
 Fn::GetAZs: us-east-1 
  
     
   

MongoVolumeMount3: 
   Type: "AWS::EC2::VolumeAttachment"
Properties: 
 InstanceId: 
  Ref: DBInstanceId
 VolumeId: 
  Ref: MongoVolume1
 Device: "/dev/sdh3"

MongoVolume4: 
 Description: Fourth EBSencrypted volume.
Type: "AWS::EC2::Volume"
Properties: 
 Size: "5"
 Encrypted: true
 Fn::GetAZs: us-east-1 
 
      
   

MongoVolumeMount4: 
   Type: "AWS::EC2::VolumeAttachment"
Properties: 
 InstanceId: 
  Ref: DBInstanceId
 VolumeId: 
  Ref: MongoVolume1
 Device: "/dev/sdh4"

Mappings:
  RegionMap: 
    us-east-1: 
      "64": "ami-011b3ccf1bd6db744"
    


Resources:
  myDemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value:
            Ref: AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: myDemoVPC

  rtb:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: {Ref: 'AWS::StackName'}
      VpcId:
        Ref: myDemoVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: rtb

  pubSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: pubAvailabilityZone}
      CidrBlock: {Ref: pubSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: pubAvailabilityZone}]
      VpcId: !Ref myDemoVPC

  privSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: {Ref: privAvailabilityZone}
      CidrBlock: {Ref: privSubnetCIDR}
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, {Ref: privAvailabilityZone}]
      VpcId: !Ref myDemoVPC

  pubSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: pubSubnet

  privSubnetAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: rtb
      SubnetId:
        Ref: privSubnet

  WebSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH & HTTPD access via port 22 & 80 respectively
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref myDemoVPC

  DBSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Frontend Access - Enable EC2 to access RDS(MySQL) access via port 27017
      VpcId: !Ref myDemoVPC

  DBInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '27017'
      ToPort: '27017'
      SourceSecurityGroupId:
        Fn::GetAtt:
        - WebSecGrp
        - GroupId
      GroupId:
        Fn::GetAtt:
        - DBSecGrp
        - GroupId


  DBSubnetGrp:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "The RDS DB Instance Identifier"
      SubnetIds:
        - !Ref privSubnet
        - !Ref pubSubnet
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - '-'
              - [{Ref: 'AWS::StackName'}, "RDS", {Ref: privAvailabilityZone}]

  

DBServer:
 Type: AWS::RDS::DBInstance
 "AWS::CloudFormation::Init": 
  
   files: 
    "/etc/yum.repos.d/10gen.repo": 
 content: >+
 
  [mongodb-org-3.4]
  name=MongoDB Repository
  baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/
  gpgcheck=1
  enabled=1
  gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc
     
      mode: 000644
     owner: root
     group: root
   
   Properties:
      DBInstanceIdentifier:
        Ref: DBInstanceId
      DBName:
        Ref: DBName
      Engine:
        Ref: DBEngine
      MasterUsername:
        Ref: DBUserName
      MasterUserPassword:
        Ref: DBUserPass
      DBInstanceClass:
        Ref: DBInstanceClass
      AllocatedStorage:
        Ref: DBStorage
      DBSubnetGroupName:
        Ref: DBSubnetGrp
      VPCSecurityGroups:
        - !GetAtt DBSecGrp.GroupId
    DeletionPolicy: Delete

webServer:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", 64]
      InstanceType: !Ref InstanceType
      SubnetId: !Ref pubSubnet
      SecurityGroupIds:
        - !Ref WebSecGrp
      UserData:
      Fn::Base64: !Sub |
             #!/bin/bash -x
              yum update -y aws-cfn-bootstrap
              yum install -y httpd php yum mdadm sysstat
   ## Waiting for EBS mounts to become available\n,
            while [ ! -e /dev/sdh1 ]; do echo waiting for /dev/sdh1 to attach; sleep 10; done\n
            while [ ! -e /dev/sdh2 ]; do echo waiting for /dev/sdh2 to attach; sleep 10; done\n
            while [ ! -e /dev/sdh3 ]; do echo waiting for /dev/sdh3 to attach; sleep 10; done\n
            while [ ! -e /dev/sdh4 ]; do echo waiting for /dev/sdh4 to attach; sleep 10; done\n
            yum -y install mongo-10gen-server > /tmp/yum-mongo.log 2>&1\n"
   ## Create RAID10 and persist configuration\n
            mdadm --verbose --create /dev/md0 --level=10 --chunk=256 --raid-devices=4 /dev/sdh1 /dev/sdh2 /dev/sdh3 /dev/sdh4 > /tmp/mdadm.log 2>&1\n
            echo '`mdadm --detail --scan`' | tee -a /etc/mdadm.conf\n
   ## Create physical and logical volumes\n
            dd if=/dev/zero of=/dev/md0 bs=512 count=1\n
            pvcreate /dev/md0\n
            vgcreate vg0 /dev/md0\n
            lvcreate -l 90%vg -n data vg0\n
            lvcreate -l 5%vg -n log vg0\n
            lvcreate -l 5%vg -n journal vg0\n
            ## Create filesystems and mount point info\n
            mke2fs -t xfs -F /dev/vg0/data > /tmp/mke2fs1.log 2>&1\n
            mke2fs -t xfs -F /dev/vg0/log > /tmp/mke2fs2.log 2>&1\n
            mke2fs -t xfs -F /dev/vg0/journal > /tmp/mke2fs3.log 2>&1\n
            mkdir /data\n
            mkdir /log\n
            mkdir /journal\n
            echo '/dev/vg0/data /data ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n
            echo '/dev/vg0/log /log ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n
            echo '/dev/vg0/journal /journal ext4 defaults,auto,noatime,noexec 0 0' | tee -a /etc/fstab\n
            mount /data > /tmp/mount1.log 2>&1\n
            mount /log > /tmp/mount2.log 2>&1\n
            mount /journal > /tmp/mount3.log 2>&1\n
            ln -s /journal /data/journal\n",
            chown -R mongod:mongod /data > /tmp/chown1.log 2>&1\n
            chown -R mongod:mongod /log > /tmp/chown2.log 2>&1\n
            chown -R mongod:mongod /journal > /tmp/chown3.log 2>&1\n
             ## Update mongod configuration\n
            cat <<EOF > /etc/mongod.conf\n
            logpath=/data/log/mongod.log\n
            logappend=true\n
            fork = true\n
            dbpath=/data\n
            rest=true\n
            EOF\n

    ## Start mongod\n"
            systemctl start mongod > /tmp/mongod-start.log 2>&1\n
            systemctl start httpd
            groupadd www
            usermod -a -G www ec2-user

            # Download wordpress site & move to http
            cd /var/www/
            curl -O https://wordpress.org/latest.tar.gz && tar -zxf latest.tar.gz
            rm -rf /var/www/html
            mv wordpress /var/www/html

            # Set the permissions
            chown -R root:www /var/www
            chmod 2775 /var/www
            find /var/www -type d -exec chmod 2775 {} +
            find /var/www -type f -exec chmod 0664 {} +

            # SE Linux permissive
            # needed to make wp connect to DB over newtork
            setsebool -P httpd_can_network_connect=1
            setsebool httpd_can_network_connect_db on

            echo "<h1> Welcome </h1>" >> /var/www/html/index.html

Outputs:
  WebServerPublicIPAddress:
    Description: 'The public IP address of the EC2 Instance.'
    Value: !GetAtt webServer.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-Public-DNS-Address'

  RDSEndPoint:
    Description: 'The RDS Endpoint of MongoDB'
Value: !GetAtt DBServer.Endpoint.Address